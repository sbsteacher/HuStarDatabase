-- Read 값 읽기
-- select 컬럼명 from 테이블명
-- * 은 와일드 카드로 모든 컬럼을 표시하라는 뜻
SELECT * FROM t_board;
SELECT title, ctnt, writer FROM t_board;


-- 레코드 2줄을 추가함
INSERT INTO t_board
(title, ctnt, writer, rdt)
VALUES
('Like!', '좋아요', '신사', NOW());

INSERT INTO t_board
(title, ctnt, writer, rdt)
VALUES
('Read', 'select문 배워봅시다', 'sql', NOW());


-- UPDATE 테이블명 SET 컬럼명 = 변경할 값 WHERE 조건식
-- WHERE 절이 없으면 전체 레코드
-- WHERE 절이 있으면 부분만 가져올 때 사용한다. 
-- 예) 작성자가 '홍길동'인 레코드만 가져오자
SELECT * FROM t_board
WHERE writer = '홍길동';

-- 1개 컬럼값만 변경할 때
UPDATE t_board
SET writer = 'hong'
WHERE writer = '홍길동';

-- 여러개 컬럼값만 변경할 때
UPDATE t_board
SET title = '수정된 제목'
, ctnt = 'ㅎㅎㅎㅎㅎ'
WHERE writer = 'hong';

-- update문에는 where절이 필수이다. where절이 없으면 모든 레코드가 변경된다.


-- Delete 값 삭제
-- DELETE FROM 테이블명 WHERE 조건식
-- delete문에는 where절이 필수이다. where절이 없으면 모든 레코드가 삭제된다.


/////////////////////////////////////

제약조건 > 잘 못 된 값이 들어가지 않도록 막는다.

PK (Primary Key) : 기본키, 레코드를 대표하는 컬럼, 모든 테이블은 PK를 가지고 있다.

CREATE TABLE t_user(
	iuser INT UNSIGNED PRIMARY KEY,
	nm VARCHAR(5) NOT NULL,
	age INT,
	gender INT UNSIGNED CHECK(gender IN (1, 2)),
	rdt DATETIME DEFAULT NOW()
);


INSERT INTO t_user
(iuser, nm, gender)
VALUES
(1, '홍길동', 1);

-- PK값이 중복이 되지 않아야 insert가 된다.
INSERT INTO t_user
(iuser, nm, gender, age)
VALUES
(2, '홍길동', 1, 20);

-- nm은 not null 속성이 있어서 insert 실패 > 즉, not null은 항상 값을 넣어줘야 함
INSERT INTO t_user
(iuser, gender, age)
VALUES
(3, 1, 20);

-- gender에 check 제약조건이 걸려있음. (1, 2)값만 입력 가능! 밑에 쿼리문은 실행됨
INSERT INTO t_user
(iuser, nm, gender, age)
VALUES
(4, '신사임당', 3, 22);

INSERT INTO t_user
(iuser, nm, gender, age)
VALUES
(4, '신사임당', 2, 22);

INSERT INTO t_user
(iuser, nm, gender, age)
VALUES
(5, '김동산', 1, 32);

INSERT INTO t_user
(iuser, nm, gender, age)
VALUES
(6, '동네형', 1, 38);


SELECT * FROM t_user
WHERE gender = 1;


SELECT * FROM t_user
ORDER BY gender DESC, nm;


SELECT * FROM t_user
ORDER BY age DESC;

-- where, order by 조합해서 사용가능
SELECT * FROM t_user
WHERE gender = 1
ORDER BY age;

-- where 절에 여러 조건을 걸 수도 있다.
SELECT * FROM t_user
WHERE gender = 1 AND age <= 30
ORDER BY age;


-- 그룹함수 (숫자)
SELECT COUNT(*) FROM t_user; -- count함수 레코드 수 알려줌
SELECT SUM(age) FROM t_user; -- sum함수 age모든 숫자 더하기
SELECT MIN(age) FROM t_user; -- min함수 age값 중 가장 작은 값
SELECT MAX(age) FROM t_user; -- max함수 age값 중 가장 큰 값
SELECT AVG(age) FROM t_user; -- avg함수 age 평균 값

-- group by 절
SELECT gender, COUNT(*), MIN(age), MAX(age), AVG(age), SUM(age) FROM t_user
GROUP BY gender;


-- select 명령어 순서
-- select from
-- join
-- where
-- group by
-- having
-- order by
-- limit


-- 정규화 설명 (제1~3정규형)

-- 사람-취미 (N:M) 다대다 관계, 실습
-- 다대다 관계는 테이블 3개가 나온다. t_user, t_hobby, t_user_hobby

CREATE TABLE t_hobby(
	ihobby INT UNSIGNED PRIMARY KEY,
	nm VARCHAR(10) NOT null
);

INSERT INTO t_hobby
(ihobby, nm)
VALUES
(1, '독서'),
(2, '영화감상'),
(3, '등산'),
(4, '음악감상'),
(5, '게임'),
(6, '농구');


-- FK (Foreign Key) 외래키, FK를 거는 이유는 잘 못 된 값이 입력되지 않기 위해 한다.

CREATE TABLE t_user_hobby(
	iuser INT UNSIGNED,
	ihobby INT UNSIGNED,
	PRIMARY KEY(iuser, ihobby),
	FOREIGN KEY (iuser) REFERENCES t_user(iuser),
	FOREIGN KEY (ihobby) REFERENCES t_hobby(ihobby)
);

-- FK가 걸려있기 때문에 iuser값은 t_user테이블에 있는 iuser값만 사용할 수 있다.
INSERT INTO t_user_hobby
(iuser, ihobby)
VALUES
(100, 2);

-- FK가 걸려있기 때문에 ihobby값은 t_hobby테이블에 있는 ihobby값만 사용할 수 있다.
INSERT INTO t_user_hobby
(iuser, ihobby)
VALUES
(2, 100);

INSERT INTO t_user_hobby
(iuser, ihobby)
VALUES
(1, 1),
(2, 1),
(2, 2),
(4, 1),
(4, 2),
(4, 3),
(4, 4),
(5, 1),
(5, 2),
(5, 3);

-- join을 걸어서 자료를 뿌림 (데이터 저장을 select 결과물처럼 하면 안 된다.)
SELECT B.iuser, B.nm AS userNm, C.nm AS hobbyNm
FROM t_user_hobby A
INNER JOIN t_user B
ON A.iuser = B.iuser
INNER JOIN t_hobby C
ON A.ihobby = C.ihobby;
